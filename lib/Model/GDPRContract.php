<?php
/**
 * GDPRContract
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public API
 *
 * Schnittstellen fÃ¼r Mittwald-Kunden
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mittwald\Api\Model;

use \ArrayAccess;
use \Mittwald\Api\ObjectSerializer;

/**
 * GDPRContract Class Doc Comment
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GDPRContract implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GDPRContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creation_date' => 'string',
        'tom' => 'object',
        'client' => 'object',
        'recipient' => 'object',
        'html' => 'string',
        'confirmation_date' => 'string',
        'sent_date' => 'string',
        'reminder_sent_date' => 'string',
        'is_partner_contract' => 'bool',
        'contract_signer' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creation_date' => 'datetime',
        'tom' => null,
        'client' => null,
        'recipient' => null,
        'html' => null,
        'confirmation_date' => 'datetime',
        'sent_date' => 'datetime',
        'reminder_sent_date' => 'datetime',
        'is_partner_contract' => null,
        'contract_signer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creation_date' => 'creationDate',
        'tom' => 'tom',
        'client' => 'client',
        'recipient' => 'recipient',
        'html' => 'html',
        'confirmation_date' => 'confirmationDate',
        'sent_date' => 'sentDate',
        'reminder_sent_date' => 'reminderSentDate',
        'is_partner_contract' => 'isPartnerContract',
        'contract_signer' => 'contractSigner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creation_date' => 'setCreationDate',
        'tom' => 'setTom',
        'client' => 'setClient',
        'recipient' => 'setRecipient',
        'html' => 'setHtml',
        'confirmation_date' => 'setConfirmationDate',
        'sent_date' => 'setSentDate',
        'reminder_sent_date' => 'setReminderSentDate',
        'is_partner_contract' => 'setIsPartnerContract',
        'contract_signer' => 'setContractSigner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creation_date' => 'getCreationDate',
        'tom' => 'getTom',
        'client' => 'getClient',
        'recipient' => 'getRecipient',
        'html' => 'getHtml',
        'confirmation_date' => 'getConfirmationDate',
        'sent_date' => 'getSentDate',
        'reminder_sent_date' => 'getReminderSentDate',
        'is_partner_contract' => 'getIsPartnerContract',
        'contract_signer' => 'getContractSigner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['tom'] = isset($data['tom']) ? $data['tom'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['recipient'] = isset($data['recipient']) ? $data['recipient'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
        $this->container['confirmation_date'] = isset($data['confirmation_date']) ? $data['confirmation_date'] : null;
        $this->container['sent_date'] = isset($data['sent_date']) ? $data['sent_date'] : null;
        $this->container['reminder_sent_date'] = isset($data['reminder_sent_date']) ? $data['reminder_sent_date'] : null;
        $this->container['is_partner_contract'] = isset($data['is_partner_contract']) ? $data['is_partner_contract'] : null;
        $this->container['contract_signer'] = isset($data['contract_signer']) ? $data['contract_signer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date Das Erstelldatum im UTC Format
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets tom
     *
     * @return object
     */
    public function getTom()
    {
        return $this->container['tom'];
    }

    /**
     * Sets tom
     *
     * @param object $tom tom
     *
     * @return $this
     */
    public function setTom($tom)
    {
        $this->container['tom'] = $tom;

        return $this;
    }

    /**
     * Gets client
     *
     * @return object
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param object $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return object
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param object $recipient recipient
     *
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html Der Inhalt des Vertrages in Form von HTML
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets confirmation_date
     *
     * @return string
     */
    public function getConfirmationDate()
    {
        return $this->container['confirmation_date'];
    }

    /**
     * Sets confirmation_date
     *
     * @param string $confirmation_date Das Datum (im UTC Format), zu dem der Vertrag angenommen wurde
     *
     * @return $this
     */
    public function setConfirmationDate($confirmation_date)
    {
        $this->container['confirmation_date'] = $confirmation_date;

        return $this;
    }

    /**
     * Gets sent_date
     *
     * @return string
     */
    public function getSentDate()
    {
        return $this->container['sent_date'];
    }

    /**
     * Sets sent_date
     *
     * @param string $sent_date Das Datum (im UTC Format), zu dem der Vertrag zuletzt via E-Mail versendet wurde
     *
     * @return $this
     */
    public function setSentDate($sent_date)
    {
        $this->container['sent_date'] = $sent_date;

        return $this;
    }

    /**
     * Gets reminder_sent_date
     *
     * @return string
     */
    public function getReminderSentDate()
    {
        return $this->container['reminder_sent_date'];
    }

    /**
     * Sets reminder_sent_date
     *
     * @param string $reminder_sent_date Das Datum (im UTC Format), zu dem automatisiert eine Erinnerungsmail versendet wurde
     *
     * @return $this
     */
    public function setReminderSentDate($reminder_sent_date)
    {
        $this->container['reminder_sent_date'] = $reminder_sent_date;

        return $this;
    }

    /**
     * Gets is_partner_contract
     *
     * @return bool
     */
    public function getIsPartnerContract()
    {
        return $this->container['is_partner_contract'];
    }

    /**
     * Sets is_partner_contract
     *
     * @param bool $is_partner_contract is_partner_contract
     *
     * @return $this
     */
    public function setIsPartnerContract($is_partner_contract)
    {
        $this->container['is_partner_contract'] = $is_partner_contract;

        return $this;
    }

    /**
     * Gets contract_signer
     *
     * @return string
     */
    public function getContractSigner()
    {
        return $this->container['contract_signer'];
    }

    /**
     * Sets contract_signer
     *
     * @param string $contract_signer Der vollstÃ¤ndige Name des Vertragsunterzeichners
     *
     * @return $this
     */
    public function setContractSigner($contract_signer)
    {
        $this->container['contract_signer'] = $contract_signer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



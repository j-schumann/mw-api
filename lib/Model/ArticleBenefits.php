<?php
/**
 * ArticleBenefits
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public API
 *
 * Schnittstellen fÃ¼r Mittwald-Kunden
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mittwald\Api\Model;

use \ArrayAccess;
use \Mittwald\Api\ObjectSerializer;

/**
 * ArticleBenefits Class Doc Comment
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArticleBenefits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Article_benefits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'server' => '\Mittwald\Api\Model\ArticleBenefitsServer',
        'domain' => '\Mittwald\Api\Model\ArticleBenefitsDomain',
        'subdomain' => '\Mittwald\Api\Model\ArticleBenefitsServerFtpUser',
        'mail_address' => '\Mittwald\Api\Model\ArticleBenefitsMailAddress',
        'mail_box' => '\Mittwald\Api\Model\ArticleBenefitsMailBox',
        'database' => '\Mittwald\Api\Model\ArticleBenefitsDatabase',
        'web_ftp' => '\Mittwald\Api\Model\ArticleBenefitsServerSsh',
        'web_mail' => '\Mittwald\Api\Model\ArticleBenefitsServerSsh',
        'dns_editor' => '\Mittwald\Api\Model\ArticleBenefitsDnsEditor',
        'firewall_plus' => '\Mittwald\Api\Model\ArticleBenefitsServerSsh',
        'monitoring_plus' => '\Mittwald\Api\Model\ArticleBenefitsServerSsh',
        'design_switcher' => '\Mittwald\Api\Model\ArticleBenefitsServerSsh',
        'version_manager' => '\Mittwald\Api\Model\ArticleBenefitsServerSsh',
        'template' => '\Mittwald\Api\Model\ArticleBenefitsServerFtpUser',
        'snapshot' => '\Mittwald\Api\Model\ArticleBenefitsServerFtpUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'server' => null,
        'domain' => null,
        'subdomain' => null,
        'mail_address' => null,
        'mail_box' => null,
        'database' => null,
        'web_ftp' => null,
        'web_mail' => null,
        'dns_editor' => null,
        'firewall_plus' => null,
        'monitoring_plus' => null,
        'design_switcher' => null,
        'version_manager' => null,
        'template' => null,
        'snapshot' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'server' => 'server',
        'domain' => 'domain',
        'subdomain' => 'subdomain',
        'mail_address' => 'mailAddress',
        'mail_box' => 'mailBox',
        'database' => 'database',
        'web_ftp' => 'webFtp',
        'web_mail' => 'webMail',
        'dns_editor' => 'dnsEditor',
        'firewall_plus' => 'firewallPlus',
        'monitoring_plus' => 'monitoringPlus',
        'design_switcher' => 'designSwitcher',
        'version_manager' => 'versionManager',
        'template' => 'template',
        'snapshot' => 'snapshot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'server' => 'setServer',
        'domain' => 'setDomain',
        'subdomain' => 'setSubdomain',
        'mail_address' => 'setMailAddress',
        'mail_box' => 'setMailBox',
        'database' => 'setDatabase',
        'web_ftp' => 'setWebFtp',
        'web_mail' => 'setWebMail',
        'dns_editor' => 'setDnsEditor',
        'firewall_plus' => 'setFirewallPlus',
        'monitoring_plus' => 'setMonitoringPlus',
        'design_switcher' => 'setDesignSwitcher',
        'version_manager' => 'setVersionManager',
        'template' => 'setTemplate',
        'snapshot' => 'setSnapshot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'server' => 'getServer',
        'domain' => 'getDomain',
        'subdomain' => 'getSubdomain',
        'mail_address' => 'getMailAddress',
        'mail_box' => 'getMailBox',
        'database' => 'getDatabase',
        'web_ftp' => 'getWebFtp',
        'web_mail' => 'getWebMail',
        'dns_editor' => 'getDnsEditor',
        'firewall_plus' => 'getFirewallPlus',
        'monitoring_plus' => 'getMonitoringPlus',
        'design_switcher' => 'getDesignSwitcher',
        'version_manager' => 'getVersionManager',
        'template' => 'getTemplate',
        'snapshot' => 'getSnapshot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['server'] = isset($data['server']) ? $data['server'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['subdomain'] = isset($data['subdomain']) ? $data['subdomain'] : null;
        $this->container['mail_address'] = isset($data['mail_address']) ? $data['mail_address'] : null;
        $this->container['mail_box'] = isset($data['mail_box']) ? $data['mail_box'] : null;
        $this->container['database'] = isset($data['database']) ? $data['database'] : null;
        $this->container['web_ftp'] = isset($data['web_ftp']) ? $data['web_ftp'] : null;
        $this->container['web_mail'] = isset($data['web_mail']) ? $data['web_mail'] : null;
        $this->container['dns_editor'] = isset($data['dns_editor']) ? $data['dns_editor'] : null;
        $this->container['firewall_plus'] = isset($data['firewall_plus']) ? $data['firewall_plus'] : null;
        $this->container['monitoring_plus'] = isset($data['monitoring_plus']) ? $data['monitoring_plus'] : null;
        $this->container['design_switcher'] = isset($data['design_switcher']) ? $data['design_switcher'] : null;
        $this->container['version_manager'] = isset($data['version_manager']) ? $data['version_manager'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['snapshot'] = isset($data['snapshot']) ? $data['snapshot'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets server
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServer
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServer $server server
     *
     * @return $this
     */
    public function setServer($server)
    {
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsDomain
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsDomain $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerFtpUser
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerFtpUser $subdomain subdomain
     *
     * @return $this
     */
    public function setSubdomain($subdomain)
    {
        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets mail_address
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsMailAddress
     */
    public function getMailAddress()
    {
        return $this->container['mail_address'];
    }

    /**
     * Sets mail_address
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsMailAddress $mail_address mail_address
     *
     * @return $this
     */
    public function setMailAddress($mail_address)
    {
        $this->container['mail_address'] = $mail_address;

        return $this;
    }

    /**
     * Gets mail_box
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsMailBox
     */
    public function getMailBox()
    {
        return $this->container['mail_box'];
    }

    /**
     * Sets mail_box
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsMailBox $mail_box mail_box
     *
     * @return $this
     */
    public function setMailBox($mail_box)
    {
        $this->container['mail_box'] = $mail_box;

        return $this;
    }

    /**
     * Gets database
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsDatabase
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsDatabase $database database
     *
     * @return $this
     */
    public function setDatabase($database)
    {
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets web_ftp
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsh
     */
    public function getWebFtp()
    {
        return $this->container['web_ftp'];
    }

    /**
     * Sets web_ftp
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsh $web_ftp web_ftp
     *
     * @return $this
     */
    public function setWebFtp($web_ftp)
    {
        $this->container['web_ftp'] = $web_ftp;

        return $this;
    }

    /**
     * Gets web_mail
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsh
     */
    public function getWebMail()
    {
        return $this->container['web_mail'];
    }

    /**
     * Sets web_mail
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsh $web_mail web_mail
     *
     * @return $this
     */
    public function setWebMail($web_mail)
    {
        $this->container['web_mail'] = $web_mail;

        return $this;
    }

    /**
     * Gets dns_editor
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsDnsEditor
     */
    public function getDnsEditor()
    {
        return $this->container['dns_editor'];
    }

    /**
     * Sets dns_editor
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsDnsEditor $dns_editor dns_editor
     *
     * @return $this
     */
    public function setDnsEditor($dns_editor)
    {
        $this->container['dns_editor'] = $dns_editor;

        return $this;
    }

    /**
     * Gets firewall_plus
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsh
     */
    public function getFirewallPlus()
    {
        return $this->container['firewall_plus'];
    }

    /**
     * Sets firewall_plus
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsh $firewall_plus firewall_plus
     *
     * @return $this
     */
    public function setFirewallPlus($firewall_plus)
    {
        $this->container['firewall_plus'] = $firewall_plus;

        return $this;
    }

    /**
     * Gets monitoring_plus
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsh
     */
    public function getMonitoringPlus()
    {
        return $this->container['monitoring_plus'];
    }

    /**
     * Sets monitoring_plus
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsh $monitoring_plus monitoring_plus
     *
     * @return $this
     */
    public function setMonitoringPlus($monitoring_plus)
    {
        $this->container['monitoring_plus'] = $monitoring_plus;

        return $this;
    }

    /**
     * Gets design_switcher
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsh
     */
    public function getDesignSwitcher()
    {
        return $this->container['design_switcher'];
    }

    /**
     * Sets design_switcher
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsh $design_switcher design_switcher
     *
     * @return $this
     */
    public function setDesignSwitcher($design_switcher)
    {
        $this->container['design_switcher'] = $design_switcher;

        return $this;
    }

    /**
     * Gets version_manager
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsh
     */
    public function getVersionManager()
    {
        return $this->container['version_manager'];
    }

    /**
     * Sets version_manager
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsh $version_manager version_manager
     *
     * @return $this
     */
    public function setVersionManager($version_manager)
    {
        $this->container['version_manager'] = $version_manager;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerFtpUser
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerFtpUser $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets snapshot
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerFtpUser
     */
    public function getSnapshot()
    {
        return $this->container['snapshot'];
    }

    /**
     * Sets snapshot
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerFtpUser $snapshot snapshot
     *
     * @return $this
     */
    public function setSnapshot($snapshot)
    {
        $this->container['snapshot'] = $snapshot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ArticleBenefitsServer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public API
 *
 * Schnittstellen fÃ¼r Mittwald-Kunden
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mittwald\Api\Model;

use \ArrayAccess;
use \Mittwald\Api\ObjectSerializer;

/**
 * ArticleBenefitsServer Class Doc Comment
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArticleBenefitsServer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Article_benefits_server';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hardware' => '\Mittwald\Api\Model\ArticleBenefitsServerHardware',
        'backup' => '\Mittwald\Api\Model\ArticleBenefitsServerBackup',
        'cron_job' => '\Mittwald\Api\Model\ArticleBenefitsServerCronJob',
        'ssl' => '\Mittwald\Api\Model\ArticleBenefitsServerSsl',
        'ip' => '\Mittwald\Api\Model\ArticleBenefitsServerSsl',
        'ftp_user' => '\Mittwald\Api\Model\ArticleBenefitsServerFtpUser',
        'ssh' => '\Mittwald\Api\Model\ArticleBenefitsServerSsh'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hardware' => null,
        'backup' => null,
        'cron_job' => null,
        'ssl' => null,
        'ip' => null,
        'ftp_user' => null,
        'ssh' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hardware' => 'hardware',
        'backup' => 'backup',
        'cron_job' => 'cronJob',
        'ssl' => 'ssl',
        'ip' => 'ip',
        'ftp_user' => 'ftpUser',
        'ssh' => 'ssh'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hardware' => 'setHardware',
        'backup' => 'setBackup',
        'cron_job' => 'setCronJob',
        'ssl' => 'setSsl',
        'ip' => 'setIp',
        'ftp_user' => 'setFtpUser',
        'ssh' => 'setSsh'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hardware' => 'getHardware',
        'backup' => 'getBackup',
        'cron_job' => 'getCronJob',
        'ssl' => 'getSsl',
        'ip' => 'getIp',
        'ftp_user' => 'getFtpUser',
        'ssh' => 'getSsh'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hardware'] = isset($data['hardware']) ? $data['hardware'] : null;
        $this->container['backup'] = isset($data['backup']) ? $data['backup'] : null;
        $this->container['cron_job'] = isset($data['cron_job']) ? $data['cron_job'] : null;
        $this->container['ssl'] = isset($data['ssl']) ? $data['ssl'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['ftp_user'] = isset($data['ftp_user']) ? $data['ftp_user'] : null;
        $this->container['ssh'] = isset($data['ssh']) ? $data['ssh'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hardware
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerHardware
     */
    public function getHardware()
    {
        return $this->container['hardware'];
    }

    /**
     * Sets hardware
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerHardware $hardware hardware
     *
     * @return $this
     */
    public function setHardware($hardware)
    {
        $this->container['hardware'] = $hardware;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerBackup
     */
    public function getBackup()
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerBackup $backup backup
     *
     * @return $this
     */
    public function setBackup($backup)
    {
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets cron_job
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerCronJob
     */
    public function getCronJob()
    {
        return $this->container['cron_job'];
    }

    /**
     * Sets cron_job
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerCronJob $cron_job cron_job
     *
     * @return $this
     */
    public function setCronJob($cron_job)
    {
        $this->container['cron_job'] = $cron_job;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsl
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsl $ssl ssl
     *
     * @return $this
     */
    public function setSsl($ssl)
    {
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsl
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsl $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets ftp_user
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerFtpUser
     */
    public function getFtpUser()
    {
        return $this->container['ftp_user'];
    }

    /**
     * Sets ftp_user
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerFtpUser $ftp_user ftp_user
     *
     * @return $this
     */
    public function setFtpUser($ftp_user)
    {
        $this->container['ftp_user'] = $ftp_user;

        return $this;
    }

    /**
     * Gets ssh
     *
     * @return \Mittwald\Api\Model\ArticleBenefitsServerSsh
     */
    public function getSsh()
    {
        return $this->container['ssh'];
    }

    /**
     * Sets ssh
     *
     * @param \Mittwald\Api\Model\ArticleBenefitsServerSsh $ssh ssh
     *
     * @return $this
     */
    public function setSsh($ssh)
    {
        $this->container['ssh'] = $ssh;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



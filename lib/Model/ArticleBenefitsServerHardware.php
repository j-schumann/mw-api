<?php
/**
 * ArticleBenefitsServerHardware
 *
 * PHP version 5
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Public API
 *
 * Schnittstellen fÃ¼r Mittwald-Kunden
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Mittwald\Api\Model;

use \ArrayAccess;
use \Mittwald\Api\ObjectSerializer;

/**
 * ArticleBenefitsServerHardware Class Doc Comment
 *
 * @category Class
 * @package  Mittwald\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArticleBenefitsServerHardware implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Article_benefits_server_hardware';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_webspace' => 'int',
        'v_cpu_cores' => 'int',
        'v_cpu_units' => 'int',
        'v_max_memory' => 'int',
        'v_max_traffic' => 'int',
        'memory_limit' => 'int',
        'max_execution_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_webspace' => null,
        'v_cpu_cores' => null,
        'v_cpu_units' => null,
        'v_max_memory' => null,
        'v_max_traffic' => null,
        'memory_limit' => null,
        'max_execution_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_webspace' => 'maxWebspace',
        'v_cpu_cores' => 'vCpuCores',
        'v_cpu_units' => 'vCpuUnits',
        'v_max_memory' => 'vMaxMemory',
        'v_max_traffic' => 'vMaxTraffic',
        'memory_limit' => 'memoryLimit',
        'max_execution_time' => 'maxExecutionTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_webspace' => 'setMaxWebspace',
        'v_cpu_cores' => 'setVCpuCores',
        'v_cpu_units' => 'setVCpuUnits',
        'v_max_memory' => 'setVMaxMemory',
        'v_max_traffic' => 'setVMaxTraffic',
        'memory_limit' => 'setMemoryLimit',
        'max_execution_time' => 'setMaxExecutionTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_webspace' => 'getMaxWebspace',
        'v_cpu_cores' => 'getVCpuCores',
        'v_cpu_units' => 'getVCpuUnits',
        'v_max_memory' => 'getVMaxMemory',
        'v_max_traffic' => 'getVMaxTraffic',
        'memory_limit' => 'getMemoryLimit',
        'max_execution_time' => 'getMaxExecutionTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_webspace'] = isset($data['max_webspace']) ? $data['max_webspace'] : null;
        $this->container['v_cpu_cores'] = isset($data['v_cpu_cores']) ? $data['v_cpu_cores'] : null;
        $this->container['v_cpu_units'] = isset($data['v_cpu_units']) ? $data['v_cpu_units'] : null;
        $this->container['v_max_memory'] = isset($data['v_max_memory']) ? $data['v_max_memory'] : null;
        $this->container['v_max_traffic'] = isset($data['v_max_traffic']) ? $data['v_max_traffic'] : null;
        $this->container['memory_limit'] = isset($data['memory_limit']) ? $data['memory_limit'] : null;
        $this->container['max_execution_time'] = isset($data['max_execution_time']) ? $data['max_execution_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_webspace
     *
     * @return int
     */
    public function getMaxWebspace()
    {
        return $this->container['max_webspace'];
    }

    /**
     * Sets max_webspace
     *
     * @param int $max_webspace max_webspace
     *
     * @return $this
     */
    public function setMaxWebspace($max_webspace)
    {
        $this->container['max_webspace'] = $max_webspace;

        return $this;
    }

    /**
     * Gets v_cpu_cores
     *
     * @return int
     */
    public function getVCpuCores()
    {
        return $this->container['v_cpu_cores'];
    }

    /**
     * Sets v_cpu_cores
     *
     * @param int $v_cpu_cores v_cpu_cores
     *
     * @return $this
     */
    public function setVCpuCores($v_cpu_cores)
    {
        $this->container['v_cpu_cores'] = $v_cpu_cores;

        return $this;
    }

    /**
     * Gets v_cpu_units
     *
     * @return int
     */
    public function getVCpuUnits()
    {
        return $this->container['v_cpu_units'];
    }

    /**
     * Sets v_cpu_units
     *
     * @param int $v_cpu_units v_cpu_units
     *
     * @return $this
     */
    public function setVCpuUnits($v_cpu_units)
    {
        $this->container['v_cpu_units'] = $v_cpu_units;

        return $this;
    }

    /**
     * Gets v_max_memory
     *
     * @return int
     */
    public function getVMaxMemory()
    {
        return $this->container['v_max_memory'];
    }

    /**
     * Sets v_max_memory
     *
     * @param int $v_max_memory v_max_memory
     *
     * @return $this
     */
    public function setVMaxMemory($v_max_memory)
    {
        $this->container['v_max_memory'] = $v_max_memory;

        return $this;
    }

    /**
     * Gets v_max_traffic
     *
     * @return int
     */
    public function getVMaxTraffic()
    {
        return $this->container['v_max_traffic'];
    }

    /**
     * Sets v_max_traffic
     *
     * @param int $v_max_traffic v_max_traffic
     *
     * @return $this
     */
    public function setVMaxTraffic($v_max_traffic)
    {
        $this->container['v_max_traffic'] = $v_max_traffic;

        return $this;
    }

    /**
     * Gets memory_limit
     *
     * @return int
     */
    public function getMemoryLimit()
    {
        return $this->container['memory_limit'];
    }

    /**
     * Sets memory_limit
     *
     * @param int $memory_limit memory_limit
     *
     * @return $this
     */
    public function setMemoryLimit($memory_limit)
    {
        $this->container['memory_limit'] = $memory_limit;

        return $this;
    }

    /**
     * Gets max_execution_time
     *
     * @return int
     */
    public function getMaxExecutionTime()
    {
        return $this->container['max_execution_time'];
    }

    /**
     * Sets max_execution_time
     *
     * @param int $max_execution_time max_execution_time
     *
     * @return $this
     */
    public function setMaxExecutionTime($max_execution_time)
    {
        $this->container['max_execution_time'] = $max_execution_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


